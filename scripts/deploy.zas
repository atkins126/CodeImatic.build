
Uses Xcopy, stringutils, Delphi;

var 
  BDSCommonDir,
  BDSBPLDir,
  BDSDir: String;
  CompilerVersion: integer;
  PackageVersion: string;
  InitialiseTask,
  CopyingFilesTask,
  CheckExistsorCreateFoldersTask: tTask;
  DeploymentDir: string;
  DeploymentBinDir: string;


  function GetPackageFilename(aPartFilename: String): string;
  begin
    result := format('%s%s.bpl', [aPartFilename, PackageVersion]);
  end;

  procedure CheckExistsorCreateFolders;
  begin
   Output.log('Check Exists or Create Folders ...');
    
    If not Folder.Exists(DeploymentDir +  'bin') then 
     if Folder.CreateFolder(DeploymentDir +  'bin') then
        Output.log('Create Folder: ' + DeploymentDir +  'bin')
     else    
        RaiseException(erCustomError, format('Failed creating folder [%s]', [DeploymentDir +  'bin'] )); 

    
  end;

  procedure CopyingFiles;
  begin
    Output.log('Copying Files ...');

    if not Xcopy(BDSBPLDir + GetPackageFilename('jvCore'), DeploymentBinDir) then
     RaiseException(erCustomError, 'Failed copying ' + BDSCommonDir + 'bpl\' + GetPackageFilename('jvCore')); 



  end;

  
  procedure Initialise;
  begin
    Output.log('Initialise ...');

    CompilerVersion := DELPHIXE8 ;

    BDSDir :=  GetBDSDIR(CompilerVersion );
    Output.log('BDS Directory:' + BDSDir );

    BDSCommonDir := GetBDSCommonDir(CompilerVersion );
    Output.log('BDS Common Directory:' + BDSCommonDir );
    
    PackageVersion := GetDelphiPackageVersion(CompilerVersion);
    Output.log('Delphi Package Version:' + PackageVersion );

    BDSBPLDir := BDSCommonDir + 'bpl\';
    Output.log('BDS BPL Directory:' + BDSBPLDir );

    DeploymentDir := File.IncludeTrailingPathDelimiter('D:\Projects\Zautomatic\deploy\');
    Output.log('Depoyment Directory:' +DeploymentDir );

    DeploymentBinDir := DeploymentDir +  'bin\';
 
    Output.log('Depoyment Bin Directory:' +DeploymentBinDir );
 end;


begin
  Output.log('Building ...');

  InitialiseTask := Task.AddTask('Initialise');
  if Not Assigned(InitialiseTask) then
    RaiseException(erCustomError, 'not assigned InitialiseTask'); 
  InitialiseTask.Criteria.Failed.Abort := True;

  CheckExistsorCreateFoldersTask := Task.AddTask('CheckExistsorCreateFolders');
  if Not Assigned(CheckExistsorCreateFoldersTask) then
    RaiseException(erCustomError, 'not assigned CheckExistsorCreateFoldersTask'); 
  CheckExistsorCreateFoldersTask.Criteria.Failed.Abort := True;

  CopyingFilesTask := Task.AddTask('CopyingFiles');
  if Not Assigned(CopyingFilesTask) then
    RaiseException(erCustomError, 'not assigned CopyingFilesTask'); 
  CopyingFilesTask.Criteria.Failed.Abort := True;

  
  if not Task.RunTargets(['Initialise', 'CheckExistsorCreateFolders', 'CopyingFiles']) then 
    RaiseException(erCustomError, 'missing procedure.'); 

  
  
end.
