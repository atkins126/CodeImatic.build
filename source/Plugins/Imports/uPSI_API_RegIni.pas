unit uPSI_API_RegIni;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_API_RegIni = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TAPI_RegIni(CL: TPSPascalCompiler);
procedure SIRegister_API_RegIni(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TAPI_RegIni(CL: TPSRuntimeClassImporter);
procedure RIRegister_API_RegIni(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   APIBase
  ,Registry
  ,MessagesLog
  ,API_RegIni
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_API_RegIni]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TAPI_RegIni(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAPIBase', 'TAPI_RegIni') do
  with CL.AddClassN(CL.FindClass('TAPIBase'),'TAPI_RegIni') do
  begin
    RegisterMethod('Procedure CloseKey');
    RegisterMethod('Function CreateKey( const Key : string) : Boolean');
    RegisterMethod('Function DeleteKey( const Key : string) : Boolean');
    RegisterMethod('Function DeleteValue( const Name : string) : Boolean');
    RegisterMethod('Function GetDataAsString( const ValueName : string; PrefixType : Boolean) : string');
    RegisterMethod('Function GetDataInfo( const ValueName : string; var Value : TRegDataInfo) : Boolean');
    RegisterMethod('Function GetDataSize( const ValueName : string) : Integer');
    RegisterMethod('Function GetDataType( const ValueName : string) : TRegDataType');
    RegisterMethod('Function GetKeyInfo( var Value : TRegKeyInfo) : Boolean');
    RegisterMethod('Procedure GetKeyNames( Strings : TStrings)');
    RegisterMethod('Procedure GetValueNames( Strings : TStrings)');
    RegisterMethod('Function HasSubKeys : Boolean');
    RegisterMethod('Function KeyExists( const Key : string) : Boolean');
    RegisterMethod('Function LoadKey( const Key, FileName : string) : Boolean');
    RegisterMethod('Procedure MoveKey( const OldName, NewName : string; Delete : Boolean)');
    RegisterMethod('Function OpenKey( const Key : string; CanCreate : Boolean) : Boolean');
    RegisterMethod('Function OpenKeyReadOnly( const Key : String) : Boolean');
    RegisterMethod('Function ReadCurrency( const Name : string) : Currency');
    RegisterMethod('Function ReadBool( const Name : string) : Boolean');
    RegisterMethod('Function ReadDate( const Name : string) : TDateTime');
    RegisterMethod('Function ReadDateTime( const Name : string) : TDateTime');
    RegisterMethod('Function ReadFloat( const Name : string) : Double');
    RegisterMethod('Function ReadInteger( const Name : string) : Integer');
    RegisterMethod('Function ReadString( const Name : string) : string');
    RegisterMethod('Function ReadTime( const Name : string) : TDateTime');
    RegisterMethod('Function RegistryConnect( const UNCName : string) : Boolean');
    RegisterMethod('Procedure RenameValue( const OldName, NewName : string)');
    RegisterMethod('Function ReplaceKey( const Key, FileName, BackUpFileName : string) : Boolean');
    RegisterMethod('Function RestoreKey( const Key, FileName : string) : Boolean');
    RegisterMethod('Function SaveKey( const Key, FileName : string) : Boolean');
    RegisterMethod('Function UnLoadKey( const Key : string) : Boolean');
    RegisterMethod('Function ValueExists( const Name : string) : Boolean');
    RegisterMethod('Procedure WriteCurrency( const Name : string; Value : Currency)');
    RegisterMethod('Procedure WriteBool( const Name : string; Value : Boolean)');
    RegisterMethod('Procedure WriteDate( const Name : string; Value : TDateTime)');
    RegisterMethod('Procedure WriteDateTime( const Name : string; Value : TDateTime)');
    RegisterMethod('Procedure WriteFloat( const Name : string; Value : Double)');
    RegisterMethod('Procedure WriteInteger( const Name : string; Value : Integer)');
    RegisterMethod('Procedure WriteString( const Name, Value : string)');
    RegisterMethod('Procedure WriteExpandString( const Name, Value : string)');
    RegisterMethod('Procedure WriteTime( const Name : string; Value : TDateTime)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_API_RegIni(CL: TPSPascalCompiler);
begin
  SIRegister_TAPI_RegIni(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_TAPI_RegIni(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAPI_RegIni) do
  begin
    RegisterMethod(@TAPI_RegIni.CloseKey, 'CloseKey');
    RegisterMethod(@TAPI_RegIni.CreateKey, 'CreateKey');
    RegisterMethod(@TAPI_RegIni.DeleteKey, 'DeleteKey');
    RegisterMethod(@TAPI_RegIni.DeleteValue, 'DeleteValue');
    RegisterMethod(@TAPI_RegIni.GetDataAsString, 'GetDataAsString');
    RegisterMethod(@TAPI_RegIni.GetDataInfo, 'GetDataInfo');
    RegisterMethod(@TAPI_RegIni.GetDataSize, 'GetDataSize');
    RegisterMethod(@TAPI_RegIni.GetDataType, 'GetDataType');
    RegisterMethod(@TAPI_RegIni.GetKeyInfo, 'GetKeyInfo');
    RegisterMethod(@TAPI_RegIni.GetKeyNames, 'GetKeyNames');
    RegisterMethod(@TAPI_RegIni.GetValueNames, 'GetValueNames');
    RegisterMethod(@TAPI_RegIni.HasSubKeys, 'HasSubKeys');
    RegisterMethod(@TAPI_RegIni.KeyExists, 'KeyExists');
    RegisterMethod(@TAPI_RegIni.LoadKey, 'LoadKey');
    RegisterMethod(@TAPI_RegIni.MoveKey, 'MoveKey');
    RegisterMethod(@TAPI_RegIni.OpenKey, 'OpenKey');
    RegisterMethod(@TAPI_RegIni.OpenKeyReadOnly, 'OpenKeyReadOnly');
    RegisterMethod(@TAPI_RegIni.ReadCurrency, 'ReadCurrency');
    RegisterMethod(@TAPI_RegIni.ReadBool, 'ReadBool');
    RegisterMethod(@TAPI_RegIni.ReadDate, 'ReadDate');
    RegisterMethod(@TAPI_RegIni.ReadDateTime, 'ReadDateTime');
    RegisterMethod(@TAPI_RegIni.ReadFloat, 'ReadFloat');
    RegisterMethod(@TAPI_RegIni.ReadInteger, 'ReadInteger');
    RegisterMethod(@TAPI_RegIni.ReadString, 'ReadString');
    RegisterMethod(@TAPI_RegIni.ReadTime, 'ReadTime');
    RegisterMethod(@TAPI_RegIni.RegistryConnect, 'RegistryConnect');
    RegisterMethod(@TAPI_RegIni.RenameValue, 'RenameValue');
    RegisterMethod(@TAPI_RegIni.ReplaceKey, 'ReplaceKey');
    RegisterMethod(@TAPI_RegIni.RestoreKey, 'RestoreKey');
    RegisterMethod(@TAPI_RegIni.SaveKey, 'SaveKey');
    RegisterMethod(@TAPI_RegIni.UnLoadKey, 'UnLoadKey');
    RegisterMethod(@TAPI_RegIni.ValueExists, 'ValueExists');
    RegisterMethod(@TAPI_RegIni.WriteCurrency, 'WriteCurrency');
    RegisterMethod(@TAPI_RegIni.WriteBool, 'WriteBool');
    RegisterMethod(@TAPI_RegIni.WriteDate, 'WriteDate');
    RegisterMethod(@TAPI_RegIni.WriteDateTime, 'WriteDateTime');
    RegisterMethod(@TAPI_RegIni.WriteFloat, 'WriteFloat');
    RegisterMethod(@TAPI_RegIni.WriteInteger, 'WriteInteger');
    RegisterMethod(@TAPI_RegIni.WriteString, 'WriteString');
    RegisterMethod(@TAPI_RegIni.WriteExpandString, 'WriteExpandString');
    RegisterMethod(@TAPI_RegIni.WriteTime, 'WriteTime');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_API_RegIni(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAPI_RegIni(CL);
end;

 
 
{ TPSImport_API_RegIni }
(*----------------------------------------------------------------------------*)
procedure TPSImport_API_RegIni.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_API_RegIni(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_API_RegIni.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_API_RegIni(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
