unit uPSI_API_ProjectConfig;

{
  This file has been generated by UnitParser v0.7, written by M. Knight
  and updated by NP. v/d Spek and George Birbilis.
  Source Code from Carlo Kok has been used to implement various sections of
  UnitParser. Components of ROPS are used in the construction of UnitParser,
  code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses
  SysUtils, Classes, uPSComponent, uPSRuntime, uPSCompiler;

type
  (* ---------------------------------------------------------------------------- *)
  TPSImport_API_ProjectConfig = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript;
      const ri: TPSRuntimeClassImporter); override;
  end;

  { compile-time registration functions }
procedure SIRegister_TAPI_ProjectConfig(CL: TPSPascalCompiler);
procedure SIRegister_API_ProjectConfig(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TAPI_ProjectConfig(CL: TPSRuntimeClassImporter);
procedure RIRegister_API_ProjectConfig(CL: TPSRuntimeClassImporter);

procedure Register;

implementation

uses
  APIBase, Runtime, API_ProjectConfig;

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_API_ProjectConfig]);
end;

(* === compile-time registration functions === *)
(* ---------------------------------------------------------------------------- *)
procedure SIRegister_TAPI_ProjectConfig(CL: TPSPascalCompiler);
begin
  // with RegClassS(CL,'TAPIBase', 'TAPI_ProjectConfig') do
  with CL.AddClassN(CL.FindClass('TAPIBase'), 'TAPI_ProjectConfig') do
  begin
    RegisterProperty('ProjectConfigFileName', 'String', iptr);
    RegisterProperty('SearchPath', 'String', iptr);
    RegisterProperty('Workingdirectory', 'string', iptr);
    RegisterMethod('Procedure Createproperty( aPropertyName : String)');
    RegisterMethod
      ('Function IsPropertyExists( aPropertyName : String) : Boolean');
    RegisterMethod
      ('Function SetProperty( aPropertyName : String; aValue : String) : Boolean');
    RegisterMethod
      ('Function DeleteProperty( aPropertyName : String) : Boolean');
    RegisterMethod('Function Getproperty( aPropertyName : String) : String');
  end;
end;

(* ---------------------------------------------------------------------------- *)
procedure SIRegister_API_ProjectConfig(CL: TPSPascalCompiler);
begin
  SIRegister_TAPI_ProjectConfig(CL);
  CL.AddConstantN('API_ProjectConfig_NopropertyExists', 'String')
    .SetString('propertyname cannot be found [%s].');
  CL.AddConstantN('API_ProjectConfig_Nopropertyblank', 'String')
    .SetString('propertyname cannot be blank.');
  CL.AddConstantN('API_ProjectConfig_propertyExists', 'String')
    .SetString('propertyname exists [%s].');
end;

(* === run-time registration functions === *)
(* ---------------------------------------------------------------------------- *)
procedure TAPI_ProjectConfigWorkingdirectory_R(Self: TAPI_ProjectConfig;
  var T: string);
begin
  T := Self.Workingdirectory;
end;

(* ---------------------------------------------------------------------------- *)
procedure TAPI_ProjectConfigSearchPath_R(Self: TAPI_ProjectConfig;
  var T: String);
begin
  T := Self.SearchPath;
end;

(* ---------------------------------------------------------------------------- *)
procedure TAPI_ProjectConfigProjectConfigFileName_R(Self: TAPI_ProjectConfig;
  var T: String);
begin
  T := Self.ProjectConfigFileName;
end;

(* ---------------------------------------------------------------------------- *)
procedure RIRegister_TAPI_ProjectConfig(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAPI_ProjectConfig) do
  begin
    RegisterPropertyHelper(@TAPI_ProjectConfigProjectConfigFileName_R, nil,
      'ProjectConfigFileName');
    RegisterPropertyHelper(@TAPI_ProjectConfigSearchPath_R, nil, 'SearchPath');
    RegisterPropertyHelper(@TAPI_ProjectConfigWorkingdirectory_R, nil,
      'Workingdirectory');
    RegisterMethod(@TAPI_ProjectConfig.Createproperty, 'Createproperty');
    RegisterMethod(@TAPI_ProjectConfig.IsPropertyExists, 'IsPropertyExists');
    RegisterMethod(@TAPI_ProjectConfig.SetProperty, 'SetProperty');
    RegisterMethod(@TAPI_ProjectConfig.DeleteProperty, 'DeleteProperty');
    RegisterMethod(@TAPI_ProjectConfig.Getproperty, 'Getproperty');
  end;
end;

(* ---------------------------------------------------------------------------- *)
procedure RIRegister_API_ProjectConfig(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAPI_ProjectConfig(CL);
end;

{ TPSImport_API_ProjectConfig }
(* ---------------------------------------------------------------------------- *)
procedure TPSImport_API_ProjectConfig.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_API_ProjectConfig(CompExec.Comp);
end;

(* ---------------------------------------------------------------------------- *)
procedure TPSImport_API_ProjectConfig.ExecImport1(CompExec: TPSScript;
  const ri: TPSRuntimeClassImporter);
begin
  RIRegister_API_ProjectConfig(ri);
end;
(* ---------------------------------------------------------------------------- *)

end.
