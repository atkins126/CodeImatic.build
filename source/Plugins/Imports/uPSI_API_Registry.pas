unit uPSI_API_Registry;

{
  This file has been generated by UnitParser v0.7, written by M. Knight
  and updated by NP. v/d Spek and George Birbilis.
  Source Code from Carlo Kok has been used to implement various sections of
  UnitParser. Components of ROPS are used in the construction of UnitParser,
  code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses
  SysUtils, Classes, uPSComponent, uPSRuntime, uPSCompiler;

type
  (* ---------------------------------------------------------------------------- *)
  TPSImport_API_Registry = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript;
      const ri: TPSRuntimeClassImporter); override;
  end;

  { compile-time registration functions }
procedure SIRegister_TAPI_Registry(CL: TPSPascalCompiler);
procedure SIRegister_API_Registry(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TAPI_Registry(CL: TPSRuntimeClassImporter);
procedure RIRegister_API_Registry(CL: TPSRuntimeClassImporter);

procedure Register;

implementation

uses
  APIBase, API_Output, Registry, Windows, API_Registry;

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_API_Registry]);
end;

(* === compile-time registration functions === *)
(* ---------------------------------------------------------------------------- *)
procedure SIRegister_TAPI_Registry(CL: TPSPascalCompiler);
begin
  // with RegClassS(CL,'TAPIBase', 'TAPI_Registry') do
  with CL.AddClassN(CL.FindClass('TAPIBase'), 'TAPI_Registry') do
  begin
    RegisterMethod
      ('Function KeyExists( const aHKEY : Int64; const aKey : String) : boolean');
    RegisterMethod
      ('Function ReadString( const aHKEY : Int64; const aKey : String; const aName : string) : String');
  end;
end;

(* ---------------------------------------------------------------------------- *)
procedure SIRegister_API_Registry(CL: TPSPascalCompiler);
begin
  CL.AddConstantN('HKEY_CLASSES_ROOT', 'LongWord').SetUInt(Int64($80000000));
  CL.AddConstantN('HKEY_CURRENT_USER', 'LongWord').SetUInt(Int64($80000001));
  CL.AddConstantN('HKEY_LOCAL_MACHINE', 'LongWord').SetUInt(Int64($80000002));
  CL.AddConstantN('HKEY_USERS', 'LongWord').SetUInt(Int64($80000003));
  CL.AddConstantN('HKEY_PERFORMANCE_DATA', 'LongWord')
    .SetUInt(Int64($80000004));
  CL.AddConstantN('HKEY_CURRENT_CONFIG', 'LongWord').SetUInt(Int64($80000005));
  CL.AddConstantN('HKEY_DYN_DATA', 'LongWord').SetUInt(Int64($80000006));
  CL.AddConstantN('API_Registry_MissingRegKey', 'String')
    .SetString('Missing Registery Key [%s]');
  SIRegister_TAPI_Registry(CL);
end;

(* === run-time registration functions === *)
(* ---------------------------------------------------------------------------- *)
procedure RIRegister_TAPI_Registry(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAPI_Registry) do
  begin
    RegisterMethod(@TAPI_Registry.KeyExists, 'KeyExists');
    RegisterMethod(@TAPI_Registry.ReadString, 'ReadString');
  end;
end;

(* ---------------------------------------------------------------------------- *)
procedure RIRegister_API_Registry(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAPI_Registry(CL);
end;

{ TPSImport_API_Registry }
(* ---------------------------------------------------------------------------- *)
procedure TPSImport_API_Registry.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_API_Registry(CompExec.Comp);
end;

(* ---------------------------------------------------------------------------- *)
procedure TPSImport_API_Registry.ExecImport1(CompExec: TPSScript;
  const ri: TPSRuntimeClassImporter);
begin
  RIRegister_API_Registry(ri);
end;
(* ---------------------------------------------------------------------------- *)

end.
