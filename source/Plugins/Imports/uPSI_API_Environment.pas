unit uPSI_API_Environment;

{
  This file has been generated by UnitParser v0.7, written by M. Knight
  and updated by NP. v/d Spek and George Birbilis.
  Source Code from Carlo Kok has been used to implement various sections of
  UnitParser. Components of ROPS are used in the construction of UnitParser,
  code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses
  SysUtils, Classes, uPSComponent, uPSRuntime, uPSCompiler;

type
  (* ---------------------------------------------------------------------------- *)
  TPSImport_API_Environment = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript;
      const ri: TPSRuntimeClassImporter); override;
  end;

  { compile-time registration functions }
procedure SIRegister_TAPI_Environment(CL: TPSPascalCompiler);
procedure SIRegister_API_Environment(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TAPI_Environment(CL: TPSRuntimeClassImporter);
procedure RIRegister_API_Environment(CL: TPSRuntimeClassImporter);

procedure Register;

implementation

uses
  APIBase, NovusWindows, API_Environment;

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_API_Environment]);
end;

(* === compile-time registration functions === *)
(* ---------------------------------------------------------------------------- *)
procedure SIRegister_TAPI_Environment(CL: TPSPascalCompiler);
begin
  // with RegClassS(CL,'TAPIBase', 'TAPI_Environment') do
  with CL.AddClassN(CL.FindClass('TAPIBase'), 'TAPI_Environment') do
  begin
    RegisterMethod('Function Is64BitOperatingSystem : boolean');
    RegisterMethod
      ('Function GetEnvironmentVar( const aVariableName : string) : string');
    RegisterMethod
      ('Function SetEnvironmentVar( const aVariableName : string; const aValue : string; aIsSystemVariable : Boolean) : integer');
  end;
end;

(* ---------------------------------------------------------------------------- *)
procedure SIRegister_API_Environment(CL: TPSPascalCompiler);
begin
  SIRegister_TAPI_Environment(CL);
  CL.AddConstantN('API_Environment_cannot_set_variable', 'String')
    .SetString('Cannot not set variable [%s]');
end;

(* === run-time registration functions === *)
(* ---------------------------------------------------------------------------- *)
procedure RIRegister_TAPI_Environment(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAPI_Environment) do
  begin
    RegisterMethod(@TAPI_Environment.Is64BitOperatingSystem,
      'Is64BitOperatingSystem');
    RegisterMethod(@TAPI_Environment.GetEnvironmentVar, 'GetEnvironmentVar');
    RegisterMethod(@TAPI_Environment.SetEnvironmentVar, 'SetEnvironmentVar');
  end;
end;

(* ---------------------------------------------------------------------------- *)
procedure RIRegister_API_Environment(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAPI_Environment(CL);
end;

{ TPSImport_API_Environment }
(* ---------------------------------------------------------------------------- *)
procedure TPSImport_API_Environment.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_API_Environment(CompExec.Comp);
end;

(* ---------------------------------------------------------------------------- *)
procedure TPSImport_API_Environment.ExecImport1(CompExec: TPSScript;
  const ri: TPSRuntimeClassImporter);
begin
  RIRegister_API_Environment(ri);
end;
(* ---------------------------------------------------------------------------- *)

end.
