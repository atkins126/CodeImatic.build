unit delphi;

interface

Uses cmd;


const
   DELPHI7    = 7;
   DELPHI2005 = 9;
   DELPHI2006 = 10;
   DELPHI2007 = 11;
   DELPHI2009 = 12;
   DELPHI2010 = 14;
   DELPHIXE   = 15;
   DELPHIXE2  = 16;
   DELPHIXE3  = 17;
   DELPHIXE4  = 18;
   DELPHIXE5  = 19;
   DELPHIXE6  = 20;
   DELPHIXE7  = 21;
   DELPHIXE8  = 22;
   DELPHI10   = 23;
   DELPHI10_1 = 24;

function GetBDSRegKey(Key: string; Name: string): string;
function GetBDS(CompilerVersion: integer; Name: string): string;
   
implementation

function GetBDS(CompilerVersion: integer; Name: string): string;
var 
  lsKey: string;
begin
  Result := '';
    
  case CompilerVersion of
    DELPHI7    : lsKey := 'Borland\Delphi\7';
    DELPHI2005 : lsKey := 'Borland\BDS\3';
    DELPHI2006 : lsKey := 'Borland\BDS\4';
    DELPHI2007 : lsKey := 'Borland\BDS\5';
    DELPHI2009 : lsKey := 'CodeGear\BDS\6';
    DELPHI2010 : lsKey := 'CodeGear\BDS\7';
    DELPHIXE   : lsKey := 'Embarcadero\BDS\8';
    DELPHIXE2  : lsKey := 'Embarcadero\BDS\9';
    DELPHIXE3  : lsKey := 'Embarcadero\BDS\10';
    DELPHIXE4  : lsKey := 'Embarcadero\BDS\11';
    DELPHIXE5  : lsKey := 'Embarcadero\BDS\12';
    DELPHIXE6..DELPHI10_1  : lsKey := 'Embarcadero\BDS\'+ IntToStr(CompilerVersion-6);
  
  else
    RaiseException(erCustomError, 'Invalid "delphi" constant; Supported compiler versions 7..24');
  end;

  Result := GetBDSRegKey(lsKey, Name);
end;


function GetBDSRegKey(Key: string; Name: string): string;
begin
  if Registry.KeyExists(HKEY_CURRENT_USER, 'SOFTWARE\' + Key + '.0') then
    Result := Registry.ReadString( HKEY_CURRENT_USER, 'SOFTWARE\' + Key + '.0', Name)
  else  
  if Registry.KeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\' + Key + '.0') then
    Result := Registry.ReadString( HKEY_LOCAL_MACHINE, 'SOFTWARE\' + Key + '.0', Name)
  else  
  if Registry.KeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Wow6432Node\' + Key + '.0') then
    Result := Registry.ReadString( HKEY_LOCAL_MACHINE, 'SOFTWARE\Wow6432Node\' + Key + '.0', Name);
end;
    

end.
