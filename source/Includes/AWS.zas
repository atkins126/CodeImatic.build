unit AWS;

interface

Uses cmd, stringutils;

Const
  aws_credentials = 'credentials';
  aws_config = 'config';
  aws_S3Bucket = '"S3Bucket": "';

function ExecAWSCliEx(aCommandLine: String; var aOutput: String): Integer;
function IsAWSCliConfigured: Boolean;
function GetAWSCliConfigPath: String;
function ExecAWSCli(aCommandLine: String): Integer;
function GetAWSCliElasticbeanstalkLastS3Bucket(aapplicationname: string;var aLastS3Bucket: String): Integer;

implementation

function IsAWSCliConfigured: Boolean;
Var
  fsaws_access_key_id: String;
  fsaws_secret_access_key: String;
  fsaws_region: String;
begin
  Result := False;

  if not Folder.Exists(GetAWSCliConfigPath) then
    begin
      RaiseException(erCustomError, 'AWSCli Configured path [' + GetAWSCliConfigPath +'] cannot not be found.');

      Exit;
    end;

  if Not File.Exists(GetAWSCliConfigPath + aws_credentials) then
    begin
      RaiseException(erCustomError, 'AWSCli Configured file cannot not be found.');

      Exit;
    end;

  fsaws_access_key_id := IniFile.ReadString(GetAWSCliConfigPath + aws_credentials,
                                'default', 'aws_access_key_id');
  fsaws_secret_access_key := IniFile.ReadString(GetAWSCliConfigPath + aws_credentials,
                                'default', 'aws_secret_access_key');


  // Config
  if File.Exists(GetAWSCliConfigPath + aws_config) then
    begin
      fsaws_region := IniFile.ReadString(GetAWSCliConfigPath + aws_config,
                                'default', 'region');

    end;

  if (Trim(fsaws_access_key_id) <> '') or (Trim(fsaws_secret_access_key) <> '') then
    Result := true;

end;

function GetAWSCliConfigPath: String;
begin
  Result := File.IncludeTrailingPathDelimiter(WinAPI.GetSpecialFolder(CSIDL_PROFILE) + '\.aws');
end;

function ExecAWSCli(aCommandLine: String): Integer;
begin
  Result := -1;

  if Not IsAWSCliConfigured then Exit;

  Result := ExecCMD('aws ' + aCommandLine);
end;
  
function GetAWSCliElasticbeanstalkLastS3Bucket(aapplicationname: string;var aLastS3Bucket: String): Integer;
var 
  lsdescribe: String;
  liPos: INteger;
  LJSON: TJSON;
begin
  aLastS3Bucket := '';
  lsdescribe := '';

  Result :=ExecAWSCliEx('elasticbeanstalk describe-application-versions --application-name "' + aapplicationname + '"' ,lsdescribe );
  if result= 0 then
     begin

       Try
         LJSON:= TJSON.Create;

         LJSON.ParseJSONString(lsdescribe);

         Messageslog.Log(LJSON.ToString);

       Finally
         LJSON.Free;
       End;  



        
     end;
end;

function ExecAWSCliEx(aCommandLine: String; var aOutput: String): Integer;
begin
  Result := -1;

  if Not IsAWSCliConfigured then Exit;

  Result := ExecCMDEx('aws ' + aCommandLine, aOutput);
end;

end.
