Var
  FZipStringList: TStringList;
  I: Integer;
  FZipOptions: TZipOptions;
begin
   MessagesLog.log('Test 1');

   try
     RaiseException(erCustomError, 'CustomError RaiseException');
   except
     Messageslog.LogError;
   end;

  Writeln('function ZipExtractFile');

  if not Zip.ZipExtractFile('D:\Projects\Zautomatic\samples\sample1\test.zip', 'test.txt', 'D:\Projects\Zautomatic\samples\sample1\data') then
    Messageslog.LogError;


  Writeln('function ZipExtractAll');

  if not Zip.ZipExtractAll('D:\Projects\Zautomatic\samples\sample1\test.zip', 'D:\Projects\Zautomatic\samples\sample1\data') then
    Messageslog.LogError;

  Writeln('function ZipBrowserList');

  Writeln('Files:');

  Try
    FZipStringList := TStringList.Create;

    if Zip.ZipBrowserList('D:\Projects\Zautomatic\samples\sample1\test.zip', FZipStringList, true) then
      begin
        For I := 0 to FZipStringList.Count - 1 do
          Writeln(FZipStringList.strings[i]);

      end
     else
        Messageslog.LogError;
  finally
    FZipStringList.Free;
  end;

  Writeln('function ZipCompress');

  Try
    FZipOptions := TZipOptions.Create;

//    FZipOptions.ExcludedFile.Add('test.txt');
    FZipOptions.ExcludedFile.Add('Test2.txt.txt');


    if not Zip.ZipCompress('D:\Projects\Zautomatic\samples\sample1\test2.zip',
             'D:\Projects\Zautomatic\samples\sample1\data', '*', FZipOptions) then
            Messageslog.LogError;
  finally
    FZipOptions.Free;
  end;





end.
